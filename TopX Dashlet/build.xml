<!--

                            **********************************************************************************
                                 TOPX Dashlet build script (derived from Will Abson share extras template)  
                            **********************************************************************************
    
    Author: Jens Goldhammer
    Version: 1.6
    
    Provides a set of targets for building extensions to Alfresco Share in ZIP, AMP and JAR archive 
    formats. Since Alfresco 3.3, JAR is the recommended package structure for all simple extensions.
    For more complex extensions that add additional Java libraries, AMP should be used.
    
    The following file structure is required in your project directory
    
        /build.xml - This file
        /config - All web-tier configuration files, e.g. web scripts and Surf configuration
        /source/web - All static resource files, e.g. CSS, JS (optional)
        /source/java - All Java source files (optional)
        
    
    During the build process, a temporary 'build' directory will be created in the base 
    project directory. This may be removed at any time using the 'clean' target.

-->
<project basedir="." default="dist-jar" name="TopX Dashlet Build Script">

	<!-- Allow override properties -->
	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- Property default values. May be overridden using above files or via command-line args -->
	<property name="jar.name" value="share-extension.jar" />
	<property name="zip.name" value="share-extension.zip" />
	<property name="amp.name" value="share-extension.amp" />
	<property name="config.includes" value="**/*.*" />
	<property name="config.excludes" value="" />
	<property name="build.res.includes" value="**/*.*" />
	<property name="build.res.excludes" value="" />
	<property name="build.res.dir" value="webapps/share" />
	<property name="build.classes.dir" value="shared/classes" />
	<property name="build.local.classes.dir" value="build/classes" />
	<property name="build.lib.dir" value="shared/lib" />
	<property name="yuicompress.warn" value="false" />
	<property name="javac.debug" value="on" />
	<!-- Tomcat properties to reload web scripts or the manager webapp -->
	<property name="tomcat.url" value="http://localhost:8080" />
	<property name="tomcat.repo.url" value="${tomcat.url}" />
	<property name="tomcat.share.url" value="${tomcat.url}" />
	<!-- Tomcat properties to reload web scripts -->
	<property name="webapp.alfresco.path" value="/alfresco" />
	<property name="webapp.share.path" value="/share" />
	<property name="post.verbose" value="false" />
	<property name="repo.admin.username" value="admin" />
	<property name="repo.admin.password" value="vmware" />
	<property name="repo.scripts.index" value="${tomcat.repo.url}${webapp.alfresco.path}/service/index" />
	<property name="share.scripts.index" value="${tomcat.share.url}${webapp.share.path}/page/index" />
	<!-- Properties to access the Tomcat Manager application -->
	<property name="webapp.manager.url" value="${tomcat.url}/manager" />
	<property name="webapp.manager.username" value="admin" />
	<property name="webapp.manager.password" value="" />
	<!-- Paths to local Tomcat instances -->
	<property name="tomcat.repo.home" value="${tomcat.home}" />
	<property name="tomcat.share.home" value="${tomcat.home}" />

	<!-- Additional property values. Generally should not be overridden -->
	<property name="config.dir" value="${basedir}/config" />
	<property name="res.dir" value="${basedir}/source/web" />
	<property name="src.dir" value="${basedir}/source/java" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.compile.dir" value="${build.dir}/classes" />
	<property name="build.jar.dir" value="${build.dir}/jar" />
	<property name="build.zip.dir" value="${build.dir}/war" />
	<property name="build.amp.dir" value="${build.dir}/amp" />
	<property name="dist.dir" value="${build.dir}/dist" />
	<property name="amp.file.properties" value="module.properties" />
	<property name="amp.file.mappings" value="file-mapping.properties" />

	<!-- Define optional tasks -->
	<!--
    <taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask" />
    <taskdef name="post"    classname="net.sf.antcontrib.net.PostTask" />
    -->

	<!-- ================================= 
          target: dist-zip              
         ================================= -->
	<target name="dist-zip" depends="dist-jar" description="zippes the jar files">
		<zip destfile="${dist.dir}/${zip.name}">
			<fileset dir="${dist.dir}" />
		</zip>
	</target>


	<!-- Additional classpath and task definitions -->

	<path id="yuicompressor.classpath">
		<fileset dir="lib">
			<include name="yuicompressor-2.4.2.jar" />
			<include name="yui-compressor-ant-task-0.5.jar" />
		</fileset>
	</path>

	<taskdef name="yuicompress" classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask">
		<classpath>
			<path refid="yuicompressor.classpath" />
		</classpath>
	</taskdef>

	<path id="ml-ant-http.classpath">
		<fileset dir="lib">
			<include name="ml-ant-http-1.1.1.jar" />
		</fileset>
	</path>

	<path id="compile.classpath">
		<fileset dir="${alfereco.sdk.dir}">
			<include name="lib/server/dependencies/**/*.jar" />
			<include name="lib/server/*.jar" />
		</fileset>
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
		<classpath>
			<path refid="ml-ant-http.classpath" />
		</classpath>
	</taskdef>


	<!-- Main build target definitions -->


	<!-- Clean out the build and distribution directories -->
	<target name="clean" description="Clean out all build directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Create required prerequisite directory structure -->
	<target name="prepare" description="Create initial build structures">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- Compile Java source code -->
	<target name="compile" description="Compile Java source code">
		<mkdir dir="${build.compile.dir}" />
		<javac srcdir="${src.dir}" destdir="${build.compile.dir}" debug="${javac.debug}">
			<classpath>
				<path refid="compile.classpath" />
			</classpath>
		</javac>
	</target>

	<!--
        Assemble the configuration and resource files in a JAR file structure. This mechanism 
        was introduced in Alfresco 3.3 and allows Share extensions containing both repository and 
        web-tier web scripts, Spring/Surf configuration and static assets to be added to the servlet 
        container as a single library. For more complex extensions, AMP files should be used.
        
        This target excludes the files custom-slingshot-application-context.xml, share-config-custom.xml
        and similar files from being copied into the classpath as these should not generally be included 
        within JAR files as it could lead to multiple copies of them being present. If found however,
        alfresco/web-extension/share-config-custom.xml will be copied into the META-INF directory,
        from where it can be loaded in 3.4.
    -->
	<target name="build-jar" description="Assemble configuration and resource files in a JAR file structure" depends="compile">
		<mkdir dir="${build.jar.dir}" />
		<!-- Copy configuration files, web scripts, etc. directly into the JAR so they appear on the 
        classpath. -->
		<copy todir="${build.jar.dir}" includeEmptyDirs="false">
			<fileset dir="${config.dir}" includes="${config.includes}">
				<!-- Spring config -->
				<exclude name="web-application-config.xml" />
				<exclude name="surf-config.xml" />
				<exclude name="alfresco/slingshot-application-context.xml" />
				<exclude name="alfresco/web-extension/custom-slingshot-application-context.xml" />
				<!-- Surf config -->
				<exclude name="alfresco/share*-config.xml" />
				<exclude name="alfresco/web-extension/share-config-custom.xml" />
				<!-- Global excludes -->
				<exclude name="${config.excludes}" />
			</fileset>
		</copy>
		<copy todir="${build.jar.dir}" includeEmptyDirs="false">
			<fileset dir="${build.local.classes.dir}" includes="**/*.class">
			</fileset>
		</copy>

		<!-- Copy web-tier resources into the JAR. These can then be loaded by browsers via Share's resources 
        servlet by prefixing their path with '/res' -->
		<mkdir dir="${build.jar.dir}/META-INF" />
		<copy todir="${build.jar.dir}/META-INF" includeEmptyDirs="false">
			<fileset dir="${res.dir}" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>
		<!-- Map alfresco/web-extension/share-config-custom.xml to META-INF/share-config-custom.xml in the JAR -->
		<copy todir="${build.jar.dir}/META-INF" includeEmptyDirs="false">
			<fileset dir="${config.dir}">
				<filename name="alfresco/web-extension/share-config-custom.xml" />
			</fileset>
			<globmapper from="alfresco/web-extension/*.xml" to="*.xml" handledirsep="true" />
		</copy>
		<!-- Minify JS -->
		<yuicompress fromdir="${res.dir}" todir="${build.jar.dir}/META-INF" excludes="**/*-min.js" warn="${yuicompress.warn}">
			<include name="**/*.js" />
		</yuicompress>
	</target>

	<!-- Build the JAR file -->
	<target name="dist-jar" depends="clean, prepare, build-jar" description="Build a JAR file containing configuration and resource files">
		<jar destfile="${dist.dir}/${jar.name}">
			<fileset dir="${build.jar.dir}" />
		</jar>

		<copy todir="${dist.dir}">
			<fileset dir="${basedir}/lib/jackson" includes="${build.res.includes}" excludes="${build.res.excludes}" />
		</copy>

	</target>

	<!--
        Assemble the configuration and resource files in a file structure suitable for deploying
        into an existing Tomcat installation, with the following directories.
        
            /shared/classes/alfresco                          Repository/Share configuration files
            /webapps/share                                    Share web resources
        
        By default web resources are placed in directly in the 'share' web application. You 
        can specify a different directory by overriding the build.res.dir property value. Set 
        this to 'webapps/ROOT/share-extension' to use the pre-3.3 recommended layout.
        
        The share-extension directory is not an official location for storing web resources 
        required by extensions but worked as an interim measure for versions of Alfresco prior to
        version 3.3, provided that the ROOT webapp is enabled in your Tomcat instance.
        
        By default configuration is placed in directly in Tomcat's shared/classes directory. You 
        can specify a different directory by overriding the build.classes.dir property value. Set 
        this to 'webapps/share/WEB-INF/classes' to place files on the classpath inside the webapp.
        
        Unlike build-jar this target does not exclude any particular configuration files from the
        file structure, however the hotcopy-tomcat-zip task will err on the side of caution and 
        will not copy files such as share-config-custom.xml itself into Tomcat.
    -->
	
	
	<!-- Shared path definition used to copy files into the local Tomcat instance(s) -->
	<patternset id="hotcopy-tomcat-zip-patternset">
		<!-- Spring config -->
		<exclude name="**/classes/web-application-config.xml" />
		<exclude name="**/classes/surf-config.xml" />
		<exclude name="**/classes/alfresco/slingshot-application-context.xml" />
		<exclude name="**/classes/alfresco/web-extension/custom-slingshot-application-context.xml" />
		<!-- Surf config -->
		<exclude name="**/classes/alfresco/share*-config.xml" />
		<exclude name="**/classes/alfresco/web-extension/share-config-custom.xml" />
	</patternset>

	<!--
        Hot copy individual files into a local Tomcat instance.
        
        In version 3.3 and above the JAR file mechanism is recommended for distributing your 
        customisations, but this target can still be used during development as it allows you to
        reload changes without restarting Tomcat.
    -->

	<!--
        Hot copy JAR file into a local Tomcat instance.
    -->
	<target name="hotcopy-tomcat-jar" depends="dist-jar" description="Hot copy JAR file into a local Tomcat instance">
		<mkdir dir="${tomcat.repo.home}/${build.lib.dir}" />
		<mkdir dir="${tomcat.share.home}/${build.lib.dir}" />
		<copy todir="${tomcat.repo.home}/${build.lib.dir}">
			<fileset file="${dist.dir}/${jar.name}" />
		</copy>
		<copy todir="${tomcat.share.home}/${build.lib.dir}">
			<fileset file="${dist.dir}/${jar.name}" />
		</copy>

		<!-- copy additional jar files to shared/lib-->
		<copy todir="${tomcat.repo.home}/shared/lib" includeEmptyDirs="false">
			<fileset dir="${basedir}/lib/jackson" includes="**/*.jar" />
		</copy>
	</target>

	<!--
        Web script reloading from Ant. These tasks use the HTTP task from 
        http://code.google.com/p/missing-link/.
    -->
	<target name="reload-webscripts-repo" depends="" description="Reload repository webscripts">
		<http url="${repo.scripts.index}" method="POST" printrequest="false" printrequestheaders="false" printresponse="false" printresponseheaders="false" expected="200" failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>

	<target name="reload-webscripts-share" depends="" description="Reload Share webscripts">
		<http url="${share.scripts.index}" method="POST" printrequest="false" printrequestheaders="false" printresponse="false" printresponseheaders="false" expected="200" failonunexpected="true">
			<credentials username="${repo.admin.username}" password="${repo.admin.password}" />
			<query>
				<parameter name="reset" value="on" />
			</query>
		</http>
	</target>

</project>