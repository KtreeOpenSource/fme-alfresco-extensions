<!--

                            ***********************************
                               Share Extensions build script  
                            ***********************************
    
    Author: Will Abson
    
    Provides a set of targets for building extensions to Alfresco Share in ZIP, ACP and JAR archive 
    formats. Since Alfresco 3.3, JAR is the recommended package structure for all simple extensions.
    For more complex extensions that add additional Java libraries or Spring configuration, ACP
    should be used.
    
    The following file structure is required in your project directory
    
        /build.xml - This file
        /config - All web-tier configuration files, e.g. web scripts and Surf configuration
        /source/web - All static resource files, e.g. CSS, JS
        
    For building AMP files, the files module.proerties and file-mapping.properties are also required
    in the project root directory.
    
    During the build process, temporary 'build' and 'dist' directories will be created in the base 
    project directory. These may be removed at any time using the 'clean' target.

-->
<project basedir="." default="dist-jar" name="fme Extended Datalist Repository">

	<!-- Allow override properties -->
	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- Property default values. May be overridden using above files or via command-line args -->
	<property name="jar.name" value="repo-extension.jar" />
	<property name="zip.name" value="repo-extension.zip" />
	<property name="amp.name" value="repo-extension.amp" />
	<property name="config.includes" value="**/*.*" />
	<property name="config.excludes" value="" />
	<property name="build.res.includes" value="**/*.*" />
	<property name="build.res.excludes" value="" />
	<property name="build.res.dir.name" value="share" />
	<property name="post.verbose" value="false" />
	<property name="repo.admin.username" value="admin" />
	<property name="repo.admin.password" value="admin" />
	<property name="tomcat.url" value="http://localhost:8080" />
	<property name="webapp.alfresco.path" value="/alfresco" />
	<property name="webapp.share.path" value="/share" />
	<property name="repo.scripts.index" value="${tomcat.url}${webapp.alfresco.path}/service/index" />
	<property name="share.scripts.index" value="${tomcat.url}${webapp.share.path}/page/index" />
	<!-- Properties to access the Tomcat Manager application -->
	<property name="webapp.manager.url" value="${tomcat.url}/manager" />
	<property name="webapp.manager.username" value="admin" />
	<property name="webapp.manager.password" value="" />
	<property name="yuicompress.warn" value="false" />

	<!-- Additional property values. Generally should not be overridden -->
	<property name="src.java.dir" value="${basedir}/src/java" />
	<property name="config.dir" value="${basedir}/src/config" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.compile.dir" value="${build.dir}/classes" />
	<property name="build.jar.dir" value="${build.dir}/jar" />
	<property name="build.zip.dir" value="${build.dir}/war" />
	<property name="build.amp.dir" value="${build.dir}/amp" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="amp.file.properties" value="module.properties" />
	<property name="amp.file.mappings" value="file-mapping.properties" />

	<!-- Define optional tasks -->
	<!--
    <taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask" />
    <taskdef name="post"    classname="net.sf.antcontrib.net.PostTask" />
    -->

	<path id="ml-ant-http.classpath">
		<fileset dir="3rdparty/nondeploylib">
			<include name="ml-ant-http-1.1.1.jar" />
		</fileset>
	</path>

	<path id="compile.classpath">
		<fileset dir="${alfresco.sdk.dir}">
			<include name="lib/server/dependencies/**/*.jar" />
			<include name="lib/server/*.jar" />
		</fileset>
		<fileset dir="3rdparty/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	<taskdef name="http" classname="org.missinglink.ant.task.http.HttpClientTask">
		<classpath>
			<path refid="ml-ant-http.classpath" />
		</classpath>
	</taskdef>


	<!-- Clean out the build and distribution directories -->
	<target name="clean" description="Clean out all build directories">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Create required prerequisite directory structure -->
	<target name="prepare" description="Create initial build structures">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- Compile Java source code -->
	<target name="compile" description="Compile Java source code">
		<mkdir dir="${build.compile.dir}" />
		<javac srcdir="${src.java.dir}" destdir="${build.compile.dir}" debug="${javac.debug}">
			<classpath>
				<path refid="compile.classpath" />
			</classpath>
		</javac>
	</target>


	<!-- Build the JAR file -->

	<target name="build-jar" description="Assemble configuration and resource files in a JAR file structure" depends="compile">
		<mkdir dir="${build.jar.dir}" />
		<!-- Copy configuration files, web scripts, etc. directly into the JAR so they appear on the 
	        classpath. -->
		<copy todir="${build.jar.dir}" includeEmptyDirs="false">
			<fileset dir="${config.dir}" includes="${config.includes}">
				<!-- Global excludes -->
				<exclude name="${config.excludes}" />
			</fileset>
		</copy>
		<!-- Copy Java class files -->
        <copy todir="${build.jar.dir}" includeEmptyDirs="false">
            <fileset dir="${build.compile.dir}" includes="**/*.class">
            </fileset>
         </copy>
	</target>
	
	<target name="dist-jar" depends="clean, prepare, build-jar" description="Build a JAR file containing configuration and resource files">
		<jar destfile="${dist.dir}/${jar.name}">
			<fileset dir="${build.jar.dir}" />
		</jar>
		<copy todir="${dist.dir}">
        	<fileset dir="3rdparty/lib">
    			<include name="*.jar" />
    		</fileset>
        </copy>
	</target>
	
	 <target name="hotcopy-tomcat-jar" depends="dist-jar" description="Hot copy JAR file into a local Tomcat instance">
        <copy todir="${tomcat.home}/webapps/alfresco/WEB-INF/lib">
            <fileset file="${dist.dir}" >
            	<include name="*.jar" />
        	</fileset>
        </copy>
    </target>

	<!--
        Uncomment to enable web script reloading from Ant. These tasks use the HTTP Post task from 
        http://ant-contrib.sourceforge.net/.
        
        To use these tasks you will need to add ant-contrib.jar to your Ant libs, uncomment the task
        definitions at the start of this file and override the org/alfresco/index.post.js web script 
        descriptor to set the authentication to 'none' (since the post task cannot handle HTTP 
        authentication).
    -->

	 <target name="reload-webscripts-repo" depends="" description="Reload repository webscripts">
        <http url="${repo.scripts.index}"
               method="POST"
               printrequest="false"
               printrequestheaders="false"
               printresponse="false"
               printresponseheaders="false"
               expected="200"
               failonunexpected="true">
            <credentials username="${repo.admin.username}" password="${repo.admin.password}" />
            <query>
                <parameter name="reset" value="on" />
            </query>
        </http>
    </target>


	<!--
        Uncomment to enable web application reloading from Ant. These tasks use the optional Tomcat
        ant tasks from catalina-ant.jar distributed with Tomcat.
        
        To use these tasks you will need to add catalina-ant.jar to your Ant libs and uncomment the 
        task definitions at the start of this file.
    -->
	<!--
    <target name="reload-webapp-alfresco" description="Reload alfresco web application" depends="">
        <reload 
            url="${webapp.manager.url}" 
            username="${webapp.manager.username}" 
            password="${webapp.manager.password}" 
            path="${webapp.alfresco.path}"/>
    </target>
    
    <target name="reload-webapp-share" description="Reload share web application" depends="">
        <reload 
            url="${webapp.manager.url}" 
            username="${webapp.manager.username}" 
            password="${webapp.manager.password}" 
            path="${webapp.share.path}"/>
    </target>
    -->

</project>